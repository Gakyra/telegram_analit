from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.inline import news_filters_kb
from services.calendar import get_events_safe

from datetime import datetime

router = Router()

class NewsState(StatesGroup):
    choosing_country = State()
    choosing_importance = State()

# üì∞ –í—Ö–æ–¥ –≤ –Ω–æ–≤–æ—Å—Ç–∏
@router.message(F.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def news_entry(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É:", reply_markup=news_filters_kb.country())
    await state.set_state(NewsState.choosing_country)

# üåç –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã
@router.callback_query(NewsState.choosing_country)
async def country_chosen(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(country=callback.data)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –≤–∞–∂–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π:", reply_markup=news_filters_kb.importance())
    await state.set_state(NewsState.choosing_importance)

# üîç –í—ã–±–æ—Ä –≤–∞–∂–Ω–æ—Å—Ç–∏
@router.callback_query(NewsState.choosing_importance)
async def importance_chosen(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    country = data["country"]
    importance = int(callback.data)

    events = await get_events_safe(country_filter=[country], min_importance=importance)
    if not events or events[0]["event"] == "–°–æ–±—ã—Ç–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã":
        await callback.message.edit_text("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
        return

    text = f"üì∞ –°–æ–±—ã—Ç–∏—è ({country}, –≤–∞–∂–Ω–æ—Å—Ç—å: {importance}):\n\n"
    for e in events[:10]:
        text += (
            f"‚Ä¢ {e['time']} ‚Äî {e['event']}\n"
            f"  –§–∞–∫—Ç: {e['actual']} | –ü—Ä–æ–≥–Ω–æ–∑: {e['forecast']} | –ü—Ä–µ–¥: {e['previous']}\n\n"
        )

    await callback.message.edit_text(text.strip())

# üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö
@router.message(F.text == "üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö")
async def remind_important(message: types.Message):
    events = await get_events_safe(country_filter=["United States"], min_importance=3)
    now = datetime.now().strftime("%H:%M")

    upcoming = [e for e in events if e["time"] >= now]
    if not upcoming:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
        return

    text = "üîî –ë–ª–∏–∂–∞–π—à–∏–µ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:\n\n"
    for e in upcoming[:5]:
        text += f"‚Ä¢ {e['time']} ‚Äî {e['event']}\n"

    await message.answer(text.strip())
