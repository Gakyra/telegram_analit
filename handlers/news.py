from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.inline import news_filters_kb
from services.calendar import get_events_by_date, get_upcoming_important_events, KYIV_TZ
from datetime import datetime
router = Router()

class NewsState(StatesGroup):
    choosing_period = State()

@router.message(F.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def news_entry(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥:", reply_markup=news_filters_kb.period())
    await state.set_state(NewsState.choosing_period)

@router.callback_query(NewsState.choosing_period)
async def period_chosen(callback: types.CallbackQuery, state: FSMContext):
    mode = callback.data  # "today", "tomorrow", "week"
    events = await get_events_by_date(mode)

    if not events or events[0]["event"].startswith("–°–æ–±—ã—Ç–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"):
        await callback.message.edit_text("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É.")
        return

    text = f"üì∞ –°–æ–±—ã—Ç–∏—è ({mode}):\n\n"
    for e in events[:10]:
        dt = e.get("datetime")
        now = datetime.now(KYIV_TZ)
        status = "üïí –û–∂–∏–¥–∞–µ—Ç—Å—è"
        if dt and dt < now:
            status = "‚úÖ –£–∂–µ –ø—Ä–æ—à–ª–æ"
        if e["actual"] != "-":
            status = "üìä –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ"

        text += (
            f"‚Ä¢ {e['time']} ‚Äî {e['event']}\n"
            f"  –°—Ç–∞—Ç—É—Å: {status}\n"
            f"  –§–∞–∫—Ç: {e['actual']} | –ü—Ä–æ–≥–Ω–æ–∑: {e['forecast']} | –ü—Ä–µ–¥: {e['previous']}\n\n"
        )

    await callback.message.edit_text(text.strip())

@router.message(F.text == "üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö")
async def remind_important(message: types.Message):
    upcoming = await get_upcoming_important_events()

    if not upcoming:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
        return

    text = "üîî –ë–ª–∏–∂–∞–π—à–∏–µ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:\n\n"
    for e in upcoming[:5]:
        text += f"‚Ä¢ {e['time']} ‚Äî {e['event']}\n"

    await message.answer(text.strip())
