import asyncio
import os
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand
from aiogram.fsm.storage.memory import MemoryStorage

from handlers.start import router as start_router
from handlers.portfolio import router as portfolio_router
from handlers.psychology import router as psychology_router
from db import init_db

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

if not TOKEN:
    raise RuntimeError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é.")

async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await init_db()

    bot = Bot(token=TOKEN, parse_mode="HTML")
    dp = Dispatcher(storage=MemoryStorage())

    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("üîß Webhook —É–¥–∞–ª—ë–Ω (–µ—Å–ª–∏ –±—ã–ª)")

    dp.include_router(start_router)
    dp.include_router(portfolio_router)
    dp.include_router(psychology_router)
    logger.info("‚úÖ –†–æ—É—Ç–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
    ])
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    logger.info("üì° –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
